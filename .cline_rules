# Member Property Market Alert - Cline Development Rules
Use PowerShell 5.1 syntax for local commands.

## ‚ö†Ô∏è **SETUP REQUIRED: GitHub Actions Authentication**

Before using CI/CD, configure these GitHub repository secrets:
- `AZURE_CLIENT_ID`: `55b4962c-d421-4d77-9f35-eb28e5689fef`
- `AZURE_TENANT_ID`: `e788f8d8-5971-4072-8cd3-06f6957b71f9`
- `AZURE_SUBSCRIPTION_ID`: `f70bb2e4-e7aa-49ac-b0b2-3fded27fbba6`
- `RENTCAST_API_KEY`: [Get from RentCast API]
- `ADMIN_API_KEY`: [Generate secure random string]

**Setup Location**: GitHub Repo ‚Üí Settings ‚Üí Secrets and variables ‚Üí Actions

### ‚úÖ **CI/CD Status (Latest Test)**
- **Azure Authentication**: ‚úÖ WORKING - Secrets properly configured
- **Build .NET Backend**: ‚úÖ WORKING - All warnings only
- **Build React UI**: ‚ùå FAILING - npm ci issues (investigating)
- **Infrastructure Deployment**: ‚è≥ PENDING - Blocked by UI build

**Next Steps**: Fix React UI build or temporarily disable UI build to test infrastructure deployment.

## üìã Project Overview

**Member Property Market Alert** is a cloud-based service that monitors residential property listings to alert financial institutions when their members' homes are listed for sale, enabling proactive loan origination opportunities.

### üèóÔ∏è Architecture
- **Backend**: Azure Functions (.NET 8 Isolated) with RESTful API
- **Frontend**: React SPA with modern JavaScript/TypeScript
- **Database**: Azure Cosmos DB (Serverless) with SQL API
- **Infrastructure**: Azure-native cloud architecture using Bicep IaC
- **Monitoring**: Application Insights with comprehensive logging

### üéØ Key Features
- **State-Level Property Monitoring**: Efficient scanning of entire states vs individual properties
- **Real-time Admin Dashboard**: React-based UI with live metrics and controls
- **Enterprise Security**: API key authentication with encrypted data
- **Cost Optimization**: 99%+ reduction in API costs through intelligent scanning

---

## üõ†Ô∏è Development Guidelines

### **Build & Test Commands**
```powershell
# .NET Backend (Functions + Core)
dotnet restore MemberPropertyMarketAlert.sln
dotnet build MemberPropertyMarketAlert.sln --configuration Release
dotnet test MemberPropertyMarketAlert.sln --configuration Release

# React Frontend
cd src/MemberPropertyAlert.UI
npm install
npm run build
npm test
```

### **Local Development**
```powershell
# Start Function App locally
cd src/MemberPropertyAlert.Functions
func start

# Start React dev server
cd src/MemberPropertyAlert.UI
npm start
```

### **Infrastructure Deployment**
```powershell
# Manual deployment using PowerShell
.\scripts\Deploy-Infrastructure.ps1 -ResourceGroupName "rg-test" -Environment "dev"

# Test Bicep template
az bicep build --file infra/main.bicep
```

---

## üèóÔ∏è Code Quality Standards

### **C# .NET Standards**
- Use **.NET 8** isolated worker model for Azure Functions
- **Async/await** throughout for all I/O operations
- **Dependency Injection** with proper interface abstractions
- **SOLID principles** and clean architecture patterns
- **Comprehensive logging** using ILogger with structured logging
- **Error handling** with proper exception types and user-friendly messages

### **React/JavaScript Standards**
- **Modern React** with hooks and functional components
- **TypeScript** preferred for type safety
- **Component-based architecture** with reusable UI components
- **State management** using React hooks or Context API
- **Responsive design** with mobile-first approach
- **Accessibility** standards (WCAG compliance)

### **Azure Integration**
- **Cosmos DB**: Use SQL API with proper partition key strategies
- **Azure Functions**: HTTP triggers with proper routing and middleware
- **Application Insights**: Comprehensive telemetry and custom metrics
- **Storage Account**: Secure file storage with proper access controls
- **Key Vault**: Sensitive configuration management (if implemented)

---

## üìÅ Project Structure

```
MemberPropertyMarketAlert/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ MemberPropertyAlert.Core/         # Business logic & models
‚îÇ   ‚îú‚îÄ‚îÄ MemberPropertyAlert.Functions/    # Azure Functions API
‚îÇ   ‚îú‚îÄ‚îÄ MemberPropertyAlert.UI/           # React admin dashboard
‚îÇ   ‚îî‚îÄ‚îÄ MemberPropertyAlert.MockWebhookClient/  # Testing utilities
‚îú‚îÄ‚îÄ infra/                               # Bicep infrastructure templates
‚îú‚îÄ‚îÄ scripts/                             # PowerShell deployment scripts
‚îú‚îÄ‚îÄ docs/                                # Documentation
‚îî‚îÄ‚îÄ .github/workflows/                   # CI/CD pipelines
```

---

## üîß Common Development Tasks

### **Adding New API Endpoints**
1. Create function in `MemberPropertyAlert.Functions`
2. Add business logic to `MemberPropertyAlert.Core`
3. Update models and interfaces as needed
4. Add appropriate logging and error handling
5. Update Swagger documentation

### **Adding UI Features**
1. Create React components in `src/MemberPropertyAlert.UI/src/components/`
2. Add routing if needed in `App.js`
3. Implement API calls using fetch/axios
4. Add responsive styling with CSS modules or styled-components
5. Include loading states and error boundaries

### **Database Changes**
1. Update Cosmos DB container definitions in `infra/main.bicep`
2. Add new models to `MemberPropertyAlert.Core/Models/`
3. Update repository interfaces and implementations
4. Consider indexing strategy for query performance

---

## üöÄ Deployment & CI/CD

### **Manual Deployment**
- Use `scripts/Deploy-Infrastructure.ps1` for local testing
- Requires Azure CLI and proper authentication
- Always test in dev environment first

### **Automated CI/CD**
- GitHub Actions workflow in `.github/workflows/member-property-alert-cd.yml`
- Deploys on push to main branch or manual trigger
- Separate jobs for build, infrastructure, and application deployment
- Includes health checks and deployment summary

### **Environment Management**
- **Dev**: `rg-member-property-alert-dev-eastus2`
- **Test**: `rg-member-property-alert-test-eastus2`
- **Prod**: `rg-member-property-alert-prod-eastus2`

---

## üîç Troubleshooting

### **Common Issues**
1. **Build Failures**: Check .NET SDK version and NuGet restore
2. **Function App Issues**: Verify local.settings.json configuration
3. **React Build Issues**: Clear node_modules and reinstall
4. **Azure Deployment**: Check resource naming conventions and limits
5. **Cosmos DB**: Verify connection strings and partition key strategies

### **Debugging Tips**
- Use Application Insights for production debugging
- Local Function App debugging with breakpoints
- React DevTools for frontend state inspection
- Azure Portal for resource monitoring and logs

---

## üìö Key Technologies

### **Backend Stack**
- .NET 8 (Isolated Worker Model)
- Azure Functions
- Azure Cosmos DB
- Application Insights
- RentCast API integration

### **Frontend Stack**
- React 18+
- Modern JavaScript/ES6+
- CSS3 with Flexbox/Grid
- Responsive design principles

### **DevOps Stack**
- Azure Bicep (Infrastructure as Code)
- GitHub Actions (CI/CD)
- PowerShell (Deployment scripts)
- Azure CLI (Local development)

---

## üéØ Business Context

### **Target Users**
- Financial institution administrators
- Loan officers and relationship managers
- IT administrators managing the service

### **Core Value Proposition**
- **Proactive Loan Origination**: Alert institutions when members list homes
- **Cost Efficiency**: 99%+ reduction in property monitoring costs
- **Competitive Advantage**: Contact members before competitors
- **Relationship Management**: Maintain customer relationships during transitions

### **Integration Points**
- **RentCast API**: Property listing data source
- **Institution Systems**: Member data import/export
- **Webhook Notifications**: Real-time alerts to institution systems
- **Admin Dashboard**: Self-service management interface
