{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.1.42791",
      "templateHash": "9292650491656813583"
    }
  },
  "parameters": {
    "environment": {
      "type": "string",
      "defaultValue": "dev",
      "allowedValues": [
        "dev",
        "test",
        "prod"
      ],
      "metadata": {
        "description": "The environment for deployment (dev, test, prod)"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The Azure region for deployment"
      }
    },
    "baseName": {
      "type": "string",
      "defaultValue": "memberpropertyalert",
      "metadata": {
        "description": "The base name for all resources"
      }
    },
    "adminEmail": {
      "type": "string",
      "metadata": {
        "description": "Administrator email address for notifications"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {
        "Environment": "[parameters('environment')]",
        "Project": "MemberPropertyMarketAlert",
        "ManagedBy": "Bicep"
      },
      "metadata": {
        "description": "Tags to apply to all resources"
      }
    }
  },
  "variables": {
    "resourcePrefix": "[format('{0}-{1}', parameters('baseName'), parameters('environment'))]",
    "cosmosAccountName": "[format('{0}-cosmos', variables('resourcePrefix'))]",
    "functionAppName": "[format('{0}-func', variables('resourcePrefix'))]",
    "webAppName": "[format('{0}-web', variables('resourcePrefix'))]",
    "appServicePlanName": "[format('{0}-plan', variables('resourcePrefix'))]",
    "storageAccountName": "[replace(format('{0}{1}st', take(parameters('baseName'), 10), parameters('environment')), '-', '')]",
    "serviceBusNamespaceName": "[format('{0}-sb', variables('resourcePrefix'))]",
    "appInsightsName": "[format('{0}-ai', variables('resourcePrefix'))]",
    "logAnalyticsName": "[format('{0}-logs', variables('resourcePrefix'))]",
    "keyVaultName": "[format('{0}-kv', variables('resourcePrefix'))]",
    "containerRegistryName": "[replace(format('{0}{1}acr', take(parameters('baseName'), 10), parameters('environment')), '-', '')]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2022-10-01",
      "name": "[variables('logAnalyticsName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 30,
        "features": {
          "searchVersion": 1
        }
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('appInsightsName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-01-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": false,
        "networkAcls": {
          "defaultAction": "Allow"
        }
      }
    },
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2023-07-01",
      "name": "[variables('containerRegistryName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "adminUserEnabled": true
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [],
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": true,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 7,
        "enableRbacAuthorization": true
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2023-04-15",
      "name": "[variables('cosmosAccountName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "kind": "GlobalDocumentDB",
      "properties": {
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session"
        },
        "locations": [
          {
            "locationName": "[parameters('location')]",
            "failoverPriority": 0,
            "isZoneRedundant": false
          }
        ],
        "databaseAccountOfferType": "Standard",
        "enableAutomaticFailover": false,
        "capabilities": "[if(equals(parameters('environment'), 'prod'), createArray(), createArray(createObject('name', 'EnableServerless')))]",
        "backupPolicy": {
          "type": "Periodic",
          "periodicModeProperties": {
            "backupIntervalInMinutes": 240,
            "backupRetentionIntervalInHours": 8,
            "backupStorageRedundancy": "Local"
          }
        }
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2023-04-15",
      "name": "[format('{0}/{1}', variables('cosmosAccountName'), 'MemberPropertyMarketAlert')]",
      "properties": {
        "resource": {
          "id": "MemberPropertyMarketAlert"
        },
        "options": "[if(equals(parameters('environment'), 'prod'), createObject('throughput', 400), createObject())]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2023-04-15",
      "name": "[format('{0}/{1}/{2}', variables('cosmosAccountName'), 'MemberPropertyMarketAlert', 'MonitoredProperties')]",
      "properties": {
        "resource": {
          "id": "MonitoredProperties",
          "partitionKey": {
            "paths": [
              "/financialInstitutionId"
            ],
            "kind": "Hash"
          },
          "indexingPolicy": {
            "indexingMode": "consistent",
            "includedPaths": [
              {
                "path": "/*"
              }
            ]
          }
        },
        "options": "[if(equals(parameters('environment'), 'prod'), createObject('throughput', 400), createObject())]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosAccountName'), 'MemberPropertyMarketAlert')]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2023-04-15",
      "name": "[format('{0}/{1}/{2}', variables('cosmosAccountName'), 'MemberPropertyMarketAlert', 'PropertyListings')]",
      "properties": {
        "resource": {
          "id": "PropertyListings",
          "partitionKey": {
            "paths": [
              "/source"
            ],
            "kind": "Hash"
          }
        },
        "options": "[if(equals(parameters('environment'), 'prod'), createObject('throughput', 400), createObject())]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosAccountName'), 'MemberPropertyMarketAlert')]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2023-04-15",
      "name": "[format('{0}/{1}/{2}', variables('cosmosAccountName'), 'MemberPropertyMarketAlert', 'PropertyMatches')]",
      "properties": {
        "resource": {
          "id": "PropertyMatches",
          "partitionKey": {
            "paths": [
              "/financialInstitutionId"
            ],
            "kind": "Hash"
          }
        },
        "options": "[if(equals(parameters('environment'), 'prod'), createObject('throughput', 400), createObject())]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosAccountName'), 'MemberPropertyMarketAlert')]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2023-04-15",
      "name": "[format('{0}/{1}/{2}', variables('cosmosAccountName'), 'MemberPropertyMarketAlert', 'FinancialInstitutions')]",
      "properties": {
        "resource": {
          "id": "FinancialInstitutions",
          "partitionKey": {
            "paths": [
              "/id"
            ],
            "kind": "Hash"
          }
        },
        "options": "[if(equals(parameters('environment'), 'prod'), createObject('throughput', 400), createObject())]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosAccountName'), 'MemberPropertyMarketAlert')]"
      ]
    },
    {
      "type": "Microsoft.ServiceBus/namespaces",
      "apiVersion": "2022-10-01-preview",
      "name": "[variables('serviceBusNamespaceName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "Standard",
        "tier": "Standard"
      },
      "properties": {
        "minimumTlsVersion": "1.2"
      }
    },
    {
      "type": "Microsoft.ServiceBus/namespaces/queues",
      "apiVersion": "2022-10-01-preview",
      "name": "[format('{0}/{1}', variables('serviceBusNamespaceName'), 'property-check-queue')]",
      "properties": {
        "defaultMessageTimeToLive": "P14D",
        "maxSizeInMegabytes": 1024,
        "requiresDuplicateDetection": false,
        "requiresSession": false,
        "enablePartitioning": false,
        "deadLetteringOnMessageExpiration": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusNamespaceName'))]"
      ]
    },
    {
      "type": "Microsoft.ServiceBus/namespaces/queues",
      "apiVersion": "2022-10-01-preview",
      "name": "[format('{0}/{1}', variables('serviceBusNamespaceName'), 'notification-queue')]",
      "properties": {
        "defaultMessageTimeToLive": "P14D",
        "maxSizeInMegabytes": 1024,
        "requiresDuplicateDetection": false,
        "requiresSession": false,
        "enablePartitioning": false,
        "deadLetteringOnMessageExpiration": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusNamespaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-09-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "[if(equals(parameters('environment'), 'prod'), 'P1v3', 'B1')]",
        "tier": "[if(equals(parameters('environment'), 'prod'), 'PremiumV3', 'Basic')]"
      },
      "kind": "linux",
      "properties": {
        "reserved": true
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-09-01",
      "name": "[variables('functionAppName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "kind": "functionapp,linux",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "siteConfig": {
          "linuxFxVersion": "DOTNET-ISOLATED|8.0",
          "alwaysOn": "[if(equals(parameters('environment'), 'prod'), true(), false())]",
          "ftpsState": "Disabled",
          "minTlsVersion": "1.2",
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', variables('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2023-01-01').keys[0].value, environment().suffixes.storage)]"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet-isolated"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2020-02-02').ConnectionString]"
            },
            {
              "name": "CosmosDb__ConnectionString",
              "value": "[listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosAccountName')), '2023-04-15').connectionStrings[0].connectionString]"
            },
            {
              "name": "ServiceBus__ConnectionString",
              "value": "[listKeys(format('{0}/AuthorizationRules/RootManageSharedAccessKey', resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusNamespaceName'))), '2022-10-01-preview').primaryConnectionString]"
            },
            {
              "name": "Environment",
              "value": "[parameters('environment')]"
            }
          ]
        },
        "httpsOnly": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosAccountName'))]",
        "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusNamespaceName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-09-01",
      "name": "[variables('webAppName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "kind": "app,linux",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "siteConfig": {
          "linuxFxVersion": "DOTNETCORE|8.0",
          "alwaysOn": "[if(equals(parameters('environment'), 'prod'), true(), false())]",
          "ftpsState": "Disabled",
          "minTlsVersion": "1.2",
          "appSettings": [
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2020-02-02').ConnectionString]"
            },
            {
              "name": "CosmosDb__ConnectionString",
              "value": "[listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosAccountName')), '2023-04-15').connectionStrings[0].connectionString]"
            },
            {
              "name": "FunctionApp__BaseUrl",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2022-09-01').defaultHostName)]"
            },
            {
              "name": "Environment",
              "value": "[parameters('environment')]"
            }
          ]
        },
        "httpsOnly": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosAccountName'))]",
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), 'CosmosConnectionString')]",
      "properties": {
        "value": "[listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosAccountName')), '2023-04-15').connectionStrings[0].connectionString]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosAccountName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), 'ServiceBusConnectionString')]",
      "properties": {
        "value": "[listKeys(format('{0}/AuthorizationRules/RootManageSharedAccessKey', resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusNamespaceName'))), '2022-10-01-preview').primaryConnectionString]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusNamespaceName'))]"
      ]
    }
  ],
  "outputs": {
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "functionAppName": {
      "type": "string",
      "value": "[variables('functionAppName')]"
    },
    "webAppName": {
      "type": "string",
      "value": "[variables('webAppName')]"
    },
    "cosmosAccountName": {
      "type": "string",
      "value": "[variables('cosmosAccountName')]"
    },
    "serviceBusNamespaceName": {
      "type": "string",
      "value": "[variables('serviceBusNamespaceName')]"
    },
    "storageAccountName": {
      "type": "string",
      "value": "[variables('storageAccountName')]"
    },
    "containerRegistryName": {
      "type": "string",
      "value": "[variables('containerRegistryName')]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[variables('keyVaultName')]"
    },
    "functionAppUrl": {
      "type": "string",
      "value": "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2022-09-01').defaultHostName)]"
    },
    "webAppUrl": {
      "type": "string",
      "value": "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', variables('webAppName')), '2022-09-01').defaultHostName)]"
    },
    "containerRegistryLoginServer": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName')), '2023-07-01').loginServer]"
    }
  }
}