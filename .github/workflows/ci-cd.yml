name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - test
        - prod

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18.x'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './src/MemberPropertyAlert.Functions'
  AZURE_WEBAPP_PACKAGE_PATH: './src/MemberPropertyAlert.UI'
  AZURE_MOCKWEBHOOK_PACKAGE_PATH: './src/MemberPropertyAlert.MockWebhookClient'

jobs:
  # Build and Test Job
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/src/package-lock.json'
        
    - name: Install UI dependencies
      working-directory: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/src
      run: npm ci
      
    - name: Build UI
      working-directory: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/src
      run: npm run build
        
    - name: Restore .NET dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --configuration Release --no-restore
      
    - name: Run unit tests
      run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: '**/TestResults/**/*'
        
    - name: Upload build artifacts - Functions
      uses: actions/upload-artifact@v4
      with:
        name: function-app
        path: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/bin/Release/net8.0'
        
    - name: Upload build artifacts - Web App
      uses: actions/upload-artifact@v4
      with:
        name: web-app
        path: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/bin/Release/net8.0'
        
    - name: Upload build artifacts - Mock Webhook Client
      uses: actions/upload-artifact@v4
      with:
        name: mock-webhook-client
        path: '${{ env.AZURE_MOCKWEBHOOK_PACKAGE_PATH }}/bin/Release/net8.0'

  # Infrastructure Deployment Job
  deploy-infrastructure:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        environment: 
          - ${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/develop' && 'test' || github.event.inputs.environment || 'dev' }}
    
    environment: ${{ matrix.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set Resource Group Name
      run: |
        echo "RESOURCE_GROUP_NAME=MemberPropertyMarketAlert-${{ matrix.environment }}-rg" >> $GITHUB_ENV
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Create Resource Group
      run: |
        az group create \
          --name ${{ env.RESOURCE_GROUP_NAME }} \
          --location "East US" \
          --tags \
            Environment=${{ matrix.environment }} \
            Project=MemberPropertyMarketAlert \
            ManagedBy=GitHub-Actions
        
    - name: Deploy Infrastructure
      uses: azure/arm-deploy@v1
      id: deploy-infra
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.RESOURCE_GROUP_NAME }}
        template: './infra/main.bicep'
        parameters: './infra/main.${{ matrix.environment }}.parameters.json'
        deploymentName: 'memberpropertyalert-${{ github.run_number }}'
        scope: 'resourcegroup'
        
    - name: Output deployment results
      run: |
        echo "Function App Name: ${{ steps.deploy-infra.outputs.functionAppName }}"
        echo "Web App Name: ${{ steps.deploy-infra.outputs.webAppName }}"
        echo "Function App URL: ${{ steps.deploy-infra.outputs.functionAppUrl }}"
        echo "Web App URL: ${{ steps.deploy-infra.outputs.webAppUrl }}"

  # Application Deployment Job
  deploy-applications:
    needs: [build-and-test, deploy-infrastructure]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        environment: 
          - ${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/develop' && 'test' || github.event.inputs.environment || 'dev' }}
    
    environment: ${{ matrix.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Function App artifacts
      uses: actions/download-artifact@v4
      with:
        name: function-app
        path: ./function-app
        
    - name: Download Web App artifacts
      uses: actions/download-artifact@v4
      with:
        name: web-app
        path: ./web-app
        
    - name: Set Resource Group Name
      run: |
        echo "RESOURCE_GROUP_NAME=MemberPropertyMarketAlert-${{ matrix.environment }}-rg" >> $GITHUB_ENV
        
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Get deployment outputs
      id: get-outputs
      run: |
        FUNCTION_APP_NAME=$(az deployment group show \
          --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
          --name memberpropertyalert-${{ github.run_number }} \
          --query "properties.outputs.functionAppName.value" \
          --output tsv)
        
        WEB_APP_NAME=$(az deployment group show \
          --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
          --name memberpropertyalert-${{ github.run_number }} \
          --query "properties.outputs.webAppName.value" \
          --output tsv)
        
        echo "function-app-name=$FUNCTION_APP_NAME" >> $GITHUB_OUTPUT
        echo "web-app-name=$WEB_APP_NAME" >> $GITHUB_OUTPUT
        
    - name: Deploy Function App
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ steps.get-outputs.outputs.function-app-name }}
        package: './function-app'
        
    - name: Deploy Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ steps.get-outputs.outputs.web-app-name }}
        package: './web-app'

  # Integration Tests Job with Mock Services
  integration-tests:
    needs: deploy-applications
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        environment: 
          - ${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/develop' && 'test' || github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Download Mock Webhook Client artifacts
      uses: actions/download-artifact@v4
      with:
        name: mock-webhook-client
        path: ./mock-webhook-client
        
    - name: Set Resource Group Name
      run: |
        echo "RESOURCE_GROUP_NAME=MemberPropertyMarketAlert-${{ matrix.environment }}-rg" >> $GITHUB_ENV
        
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Get deployment outputs
      id: get-outputs
      run: |
        FUNCTION_APP_URL=$(az deployment group show \
          --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
          --name memberpropertyalert-${{ github.run_number }} \
          --query "properties.outputs.functionAppUrl.value" \
          --output tsv)
        
        WEB_APP_URL=$(az deployment group show \
          --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
          --name memberpropertyalert-${{ github.run_number }} \
          --query "properties.outputs.webAppUrl.value" \
          --output tsv)
        
        echo "function-app-url=$FUNCTION_APP_URL" >> $GITHUB_OUTPUT
        echo "web-app-url=$WEB_APP_URL" >> $GITHUB_OUTPUT
        
    - name: Start Mock Webhook Client
      run: |
        cd mock-webhook-client
        dotnet MemberPropertyAlert.MockWebhookClient.dll --urls "http://localhost:5000" &
        echo $! > webhook_client.pid
        sleep 10
        
    - name: Wait for applications to be ready
      run: |
        echo "Waiting for applications to be ready..."
        sleep 60
        
    - name: Run integration tests with mock services
      env:
        FUNCTION_APP_URL: ${{ steps.get-outputs.outputs.function-app-url }}
        WEB_APP_URL: ${{ steps.get-outputs.outputs.web-app-url }}
        MOCK_WEBHOOK_URL: "http://localhost:5000"
        ENVIRONMENT: ${{ matrix.environment }}
      run: |
        echo "Running integration tests against:"
        echo "Function App: $FUNCTION_APP_URL"
        echo "Web App: $WEB_APP_URL"
        echo "Mock Webhook Client: $MOCK_WEBHOOK_URL"
        
        # Health checks
        curl -f "$FUNCTION_APP_URL/api/health" || exit 1
        curl -f "$WEB_APP_URL/health" || exit 1
        curl -f "$MOCK_WEBHOOK_URL/health" || exit 1
        
        # Test mock webhook client functionality
        echo "Testing mock webhook client..."
        
        # Send a test webhook
        curl -X POST "$MOCK_WEBHOOK_URL/webhook" \
          -H "Content-Type: application/json" \
          -H "User-Agent: PropertyAlert-Test/1.0" \
          -d '{"test": "webhook", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "environment": "'$ENVIRONMENT'"}'
        
        # Verify webhook was received
        sleep 2
        WEBHOOK_COUNT=$(curl -s "$MOCK_WEBHOOK_URL/webhooks" | jq length)
        if [ "$WEBHOOK_COUNT" -lt 1 ]; then
          echo "ERROR: Mock webhook client did not receive test webhook"
          exit 1
        fi
        
        echo "✅ Mock webhook client is working correctly"
        echo "✅ Integration tests completed successfully"
        
    - name: Stop Mock Webhook Client
      if: always()
      run: |
        if [ -f mock-webhook-client/webhook_client.pid ]; then
          kill $(cat mock-webhook-client/webhook_client.pid) || true
        fi
        
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results-${{ matrix.environment }}
        path: '**/IntegrationTestResults/**/*'
