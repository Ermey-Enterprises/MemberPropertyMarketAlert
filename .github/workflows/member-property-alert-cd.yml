name: Member Property Alert Deployment

on:
  push:
    branches: [ master, main ]
    paths:
      - 'src/**'
      - 'infra/main.bicep'
      - '.github/workflows/member-property-alert-cd.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod
      deployFunctionApp:
        description: 'Deploy Function App'
        required: false
        default: true
        type: boolean
      deployWebApp:
        description: 'Deploy Web App'
        required: false
        default: true
        type: boolean
      debug_mode:
        description: 'Enable enhanced debug logging'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read
  checks: read

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18'
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_LOCATION: 'eastus2'
  DEBUG_MODE: ${{ github.event.inputs.debug_mode || 'false' }}

jobs:
  analyze-changes:
    runs-on: ubuntu-latest
    outputs:
      infra-changed: ${{ steps.changes.outputs.infra-changed }}
      functions-changed: ${{ steps.changes.outputs.functions-changed }}
      ui-changed: ${{ steps.changes.outputs.ui-changed }}
      deploy-environment: ${{ steps.deployment-flags.outputs.deploy-environment }}
      resource-group-name: ${{ steps.deployment-flags.outputs.resource-group-name }}
      deploy-function-app: ${{ steps.deployment-flags.outputs.deploy-function-app }}
      deploy-web-app: ${{ steps.deployment-flags.outputs.deploy-web-app }}
    steps:
      - name: Initialize workflow
        run: |
          echo "🚀 Member Property Alert Deployment Workflow"
          echo "📅 Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "🎯 Event: ${{ github.event_name }}"
          echo "🌿 Ref: ${{ github.ref }}"
          echo "📝 SHA: ${{ github.sha }}"
          echo "👤 Actor: ${{ github.actor }}"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Detect changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "🎯 Manual deployment triggered"
            echo "infra-changed=true" >> $GITHUB_OUTPUT
            echo "functions-changed=true" >> $GITHUB_OUTPUT
            echo "ui-changed=true" >> $GITHUB_OUTPUT
          else
            echo "🔄 Automatic deployment - analyzing changes"
            
            # Get list of changed files
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            echo "📁 Changed files:"
            echo "$CHANGED_FILES" | sed 's/^/  /'
            
            # Infrastructure changes
            INFRA_CHANGED=$(echo "$CHANGED_FILES" | grep -E '^infra/main\.bicep|^\.github/workflows/member-property-alert-cd\.yml' | wc -l)
            
            # Functions changes (Core and Functions projects)
            FUNCTIONS_CHANGED=$(echo "$CHANGED_FILES" | grep -E '^src/MemberPropertyAlert\.(Core|Functions)/' | wc -l)
            
            # UI changes - broader detection including all UI project files
            UI_PROJECT_CHANGED=$(echo "$CHANGED_FILES" | grep -E '^src/MemberPropertyAlert\.UI/' | wc -l)
            UI_SOURCE_CHANGED=$(echo "$CHANGED_FILES" | grep -E '^src/MemberPropertyAlert\.UI/src/' | wc -l)
            UI_CONFIG_CHANGED=$(echo "$CHANGED_FILES" | grep -E '^src/MemberPropertyAlert\.UI/(Program\.cs|.*\.csproj|package\.json|package-lock\.json|tailwind\.config\.js)' | wc -l)
            
            # UI is considered changed if ANY UI project file changed
            UI_CHANGED=$UI_PROJECT_CHANGED
            
            # FORCE UI DEPLOYMENT: If we have recent UI changes or workflow changes that affect UI deployment
            # This ensures UI gets deployed when we fix deployment issues
            if [ "$UI_CHANGED" -eq 0 ]; then
              echo "🔍 No direct UI changes detected, checking for recent UI work..."
              # Check if we have workflow changes that might be fixing UI deployment
              WORKFLOW_CHANGED=$(echo "$CHANGED_FILES" | grep -E '^\.github/workflows/member-property-alert-cd\.yml' | wc -l)
              if [ "$WORKFLOW_CHANGED" -gt 0 ]; then
                echo "🔧 Workflow changes detected - forcing UI deployment to test fixes"
                UI_CHANGED=1
              fi
            fi
            
            # Set outputs
            [ "$INFRA_CHANGED" -gt 0 ] && echo "infra-changed=true" >> $GITHUB_OUTPUT || echo "infra-changed=false" >> $GITHUB_OUTPUT
            [ "$FUNCTIONS_CHANGED" -gt 0 ] && echo "functions-changed=true" >> $GITHUB_OUTPUT || echo "functions-changed=false" >> $GITHUB_OUTPUT
            [ "$UI_CHANGED" -gt 0 ] && echo "ui-changed=true" >> $GITHUB_OUTPUT || echo "ui-changed=false" >> $GITHUB_OUTPUT
            
            echo "📊 Changes detected:"
            echo "  Infrastructure: $INFRA_CHANGED files"
            echo "  Functions: $FUNCTIONS_CHANGED files"
            echo "  UI Project: $UI_PROJECT_CHANGED files"
            echo "    - UI Source: $UI_SOURCE_CHANGED files"
            echo "    - UI Config: $UI_CONFIG_CHANGED files"
            echo "  UI Changed (final): $UI_CHANGED files"
            
            echo "🎯 Final deployment decisions:"
            echo "  infra-changed: $([ "$INFRA_CHANGED" -gt 0 ] && echo 'true' || echo 'false')"
            echo "  functions-changed: $([ "$FUNCTIONS_CHANGED" -gt 0 ] && echo 'true' || echo 'false')"
            echo "  ui-changed: $([ "$UI_CHANGED" -gt 0 ] && echo 'true' || echo 'false')"
            
            # Show specific UI changes for debugging
            if [ "$UI_CHANGED" -gt 0 ]; then
              echo "🎨 UI files changed:"
              echo "$CHANGED_FILES" | grep -E '^src/MemberPropertyAlert\.UI/' | sed 's/^/  /' || echo "  (forced due to workflow changes)"
            fi
          fi
      
      - name: Set deployment flags
        id: deployment-flags
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            DEPLOY_ENV="${{ github.event.inputs.environment }}"
            DEPLOY_FUNCTION_APP="${{ github.event.inputs.deployFunctionApp }}"
            DEPLOY_WEB_APP="${{ github.event.inputs.deployWebApp }}"
          else
            DEPLOY_ENV="dev"
            DEPLOY_FUNCTION_APP="true"
            DEPLOY_WEB_APP="true"
          fi
          
          RG_NAME="rg-member-property-alert-${DEPLOY_ENV}-eastus2"
          
          echo "deploy-environment=$DEPLOY_ENV" >> $GITHUB_OUTPUT
          echo "resource-group-name=$RG_NAME" >> $GITHUB_OUTPUT
          echo "deploy-function-app=$DEPLOY_FUNCTION_APP" >> $GITHUB_OUTPUT
          echo "deploy-web-app=$DEPLOY_WEB_APP" >> $GITHUB_OUTPUT
          
          echo "🎯 Deployment Configuration:"
          echo "  Environment: $DEPLOY_ENV"
          echo "  Resource Group: $RG_NAME"
          echo "  Deploy Function App: $DEPLOY_FUNCTION_APP"
          echo "  Deploy Web App: $DEPLOY_WEB_APP"

  build-and-test:
    runs-on: ubuntu-latest
    needs: [analyze-changes]
    outputs:
      build-successful: ${{ steps.build-status.outputs.success }}
    steps:
      - name: Initialize build phase
        run: |
          echo "🏗️ Build and Test Phase"
          echo "📅 Start: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "🎯 Environment: ${{ needs.analyze-changes.outputs.deploy-environment }}"

      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Setup Node.js
        if: needs.analyze-changes.outputs.ui-changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'src/MemberPropertyAlert.UI/package.json'
      
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.sln') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.sln') }}-
            ${{ runner.os }}-nuget-
      
      - name: Build and test .NET solution
        run: |
          echo "🏗️ Building .NET solution..."
          
          echo "📦 Restoring packages..."
          dotnet restore MemberPropertyMarketAlert.sln --no-cache --verbosity minimal
          
          echo "🔨 Building solution..."
          dotnet build MemberPropertyMarketAlert.sln --no-restore --configuration Release --verbosity minimal
          
          echo "🧪 Running tests..."
          dotnet test MemberPropertyMarketAlert.sln --no-build --configuration Release --verbosity minimal --logger "console;verbosity=minimal"
      
      - name: Build React UI
        if: needs.analyze-changes.outputs.ui-changed == 'true'
        working-directory: src/MemberPropertyAlert.UI
        run: |
          echo "🎨 Building React UI..."
          
          # Debug information
          echo "🔍 Environment debugging:"
          echo "  Node version: $(node --version)"
          echo "  NPM version: $(npm --version)"
          echo "  Working directory: $(pwd)"
          echo "  Package.json exists: $(test -f package.json && echo 'YES' || echo 'NO')"
          echo "  Package-lock.json exists: $(test -f package-lock.json && echo 'YES' || echo 'NO')"
          
          # Show package.json content for debugging
          echo "📄 Package.json content:"
          cat package.json
          
          echo "📦 Installing dependencies..."
          if [ -f "package-lock.json" ]; then
            echo "🔧 Using npm ci (clean install)..."
            npm ci --verbose
          else
            echo "🔧 Using npm install..."
            npm install --verbose
          fi
          
          echo "✅ Dependencies installed successfully"
          echo "📋 Installed packages:"
          npm list --depth=0
          
          echo "🧪 Running React tests..."
          npm test -- --ci --coverage --maxWorkers=2 --passWithNoTests --watchAll=false --verbose
          
          echo "📦 Building production bundle..."
          npm run build --verbose
          
          echo "✅ React build completed successfully"
          echo "📁 Build output:"
          ls -la build/ || echo "Build directory not found"
      
      - name: Publish Function App
        if: needs.analyze-changes.outputs.functions-changed == 'true'
        run: |
          echo "📦 Publishing Function App..."
          mkdir -p ./publish/functions
          
          dotnet publish src/MemberPropertyAlert.Functions/MemberPropertyAlert.Functions.csproj \
            --configuration Release \
            --output ./publish/functions \
            --no-restore \
            --no-build \
            --verbosity minimal
      
      - name: Prepare UI deployment package
        if: needs.analyze-changes.outputs.ui-changed == 'true'
        run: |
          echo "📦 Preparing UI deployment package..."
          mkdir -p ./publish/ui
          
          # Copy React build files to build subdirectory (server.js expects this structure)
          if [ -d "src/MemberPropertyAlert.UI/build" ]; then
            echo "📁 Copying React build files to build/ subdirectory..."
            mkdir -p ./publish/ui/build
            cp -r src/MemberPropertyAlert.UI/build/* ./publish/ui/build/
          elif [ -d "src/MemberPropertyAlert.UI/dist" ]; then
            echo "📁 Copying React dist files to build/ subdirectory..."
            mkdir -p ./publish/ui/build
            cp -r src/MemberPropertyAlert.UI/dist/* ./publish/ui/build/
          else
            echo "❌ React build output not found"
            exit 1
          fi
          
          # Copy Express server files needed for Azure deployment
          echo "📁 Copying Express server files..."
          cp src/MemberPropertyAlert.UI/server.js ./publish/ui/
          cp src/MemberPropertyAlert.UI/package.json ./publish/ui/
          cp src/MemberPropertyAlert.UI/package-lock.json ./publish/ui/ 2>/dev/null || echo "⚠️ package-lock.json not found, skipping"
          
          # Install production dependencies in the deployment package
          echo "📦 Installing production dependencies for deployment..."
          cd ./publish/ui
          npm install --production --no-optional
          cd ../..
          
          echo "✅ UI deployment package prepared with Express server and dependencies"
          echo "📋 Package contents:"
          ls -la ./publish/ui/
          echo "📋 Build directory contents:"
          ls -la ./publish/ui/build/ | head -10
          echo "📋 Node modules installed:"
          ls -la ./publish/ui/node_modules/ | head -10
      
      - name: Upload Function App artifact
        if: needs.analyze-changes.outputs.functions-changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: functions-app
          path: ./publish/functions
          retention-days: 1
      
      - name: Upload UI artifact
        if: needs.analyze-changes.outputs.ui-changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ui-app
          path: ./publish/ui
          retention-days: 1
      
      - name: Set build status
        id: build-status
        run: |
          echo "✅ Build phase completed successfully"
          echo "success=true" >> $GITHUB_OUTPUT

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: [analyze-changes, build-and-test]
    if: needs.build-and-test.result == 'success' && needs.analyze-changes.outputs.infra-changed == 'true'
    outputs:
      function-app-name: ${{ steps.deploy-infra.outputs.function-app-name }}
      web-app-name: ${{ steps.deploy-infra.outputs.web-app-name }}
      function-app-url: ${{ steps.deploy-infra.outputs.function-app-url }}
      web-app-url: ${{ steps.deploy-infra.outputs.web-app-url }}
      key-vault-name: ${{ steps.deploy-infra.outputs.key-vault-name }}
    steps:
      - name: Initialize infrastructure deployment
        run: |
          echo "🏗️ Infrastructure Deployment"
          echo "📅 Start: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "🎯 Environment: ${{ needs.analyze-changes.outputs.deploy-environment }}"
          echo "📂 Resource Group: ${{ needs.analyze-changes.outputs.resource-group-name }}"

      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
      
      - name: Deploy infrastructure
        id: deploy-infra
        run: |
          RG_NAME="${{ needs.analyze-changes.outputs.resource-group-name }}"
          ENV="${{ needs.analyze-changes.outputs.deploy-environment }}"
          LOC="${{ env.AZURE_LOCATION }}"
          
          echo "🏗️ Deploying infrastructure..."
          echo "  Resource Group: $RG_NAME"
          echo "  Environment: $ENV"
          echo "  Location: $LOC"
          
          # Create resource group
          echo "🔨 Creating resource group..."
          az group create --name "$RG_NAME" --location "$LOC" --output none
          
          # Generate deployment name
          DEPLOYMENT_NAME="mpa-$(date +%Y%m%d-%H%M%S)-${{ github.run_number }}"
          
          echo "🔍 Validating Bicep template..."
          az bicep build --file infra/main.bicep
          
          # Check if Key Vault exists and has secrets (for Key Vault mode)
          KV_NAME="kv-mpa-${ENV}-eus2-"
          EXISTING_KV=$(az keyvault list --resource-group "$RG_NAME" --query "[?starts_with(name, '$KV_NAME')].name" -o tsv 2>/dev/null || echo "")
          
          if [ -n "$EXISTING_KV" ]; then
            echo "🔑 Key Vault found: $EXISTING_KV - attempting Key Vault mode"
            
            # Try to retrieve secrets from Key Vault
            RENTCAST_KEY=$(az keyvault secret show --vault-name "$EXISTING_KV" --name "RENTCAST-API-KEY" --query value -o tsv 2>/dev/null || echo "")
            ADMIN_KEY=$(az keyvault secret show --vault-name "$EXISTING_KV" --name "ADMIN-API-KEY" --query value -o tsv 2>/dev/null || echo "")
            CLIENT_ID=$(az keyvault secret show --vault-name "$EXISTING_KV" --name "AZURE-CLIENT-ID" --query value -o tsv 2>/dev/null || echo "")
            TENANT_ID=$(az keyvault secret show --vault-name "$EXISTING_KV" --name "AZURE-TENANT-ID" --query value -o tsv 2>/dev/null || echo "")
            SUB_ID=$(az keyvault secret show --vault-name "$EXISTING_KV" --name "AZURE-SUBSCRIPTION-ID" --query value -o tsv 2>/dev/null || echo "")
            
            if [ -n "$RENTCAST_KEY" ] && [ -n "$ADMIN_KEY" ] && [ -n "$CLIENT_ID" ]; then
              echo "✅ Using Key Vault mode - secrets retrieved from $EXISTING_KV"
              DEPLOYMENT_MODE="keyvault"
            else
              echo "⚠️ Key Vault exists but missing secrets - falling back to GitHub secrets mode"
              DEPLOYMENT_MODE="github"
            fi
          else
            echo "🆕 No existing Key Vault found - using GitHub secrets mode for initial deployment"
            DEPLOYMENT_MODE="github"
          fi
          
          echo "🚀 Deploying infrastructure in $DEPLOYMENT_MODE mode..."
          
          if [ "$DEPLOYMENT_MODE" == "keyvault" ]; then
            # Deploy using Key Vault secrets
            az deployment group create \
              --resource-group "$RG_NAME" \
              --name "$DEPLOYMENT_NAME" \
              --template-file infra/main.bicep \
              --parameters \
                environment="$ENV" \
                location="$LOC" \
                deployFunctionApp="${{ needs.analyze-changes.outputs.deploy-function-app }}" \
                deployWebApp="${{ needs.analyze-changes.outputs.deploy-web-app }}" \
                rentCastApiKey="$RENTCAST_KEY" \
                adminApiKey="$ADMIN_KEY" \
                azureClientId="$CLIENT_ID" \
                azureTenantId="$TENANT_ID" \
                azureSubscriptionId="$SUB_ID" \
              --verbose \
              --debug
          else
            # Deploy using GitHub secrets (initial deployment or fallback)
            # Validate GitHub secrets
            if [ -z "${{ secrets.RENTCAST_API_KEY }}" ]; then
              echo "❌ RENTCAST_API_KEY secret not configured"
              exit 1
            fi
            
            if [ -z "${{ secrets.ADMIN_API_KEY }}" ]; then
              echo "❌ ADMIN_API_KEY secret not configured"
              exit 1
            fi
            
            echo "✅ GitHub secrets validated"
            
            az deployment group create \
              --resource-group "$RG_NAME" \
              --name "$DEPLOYMENT_NAME" \
              --template-file infra/main.bicep \
              --parameters \
                environment="$ENV" \
                location="$LOC" \
                deployFunctionApp="${{ needs.analyze-changes.outputs.deploy-function-app }}" \
                deployWebApp="${{ needs.analyze-changes.outputs.deploy-web-app }}" \
                rentCastApiKey="${{ secrets.RENTCAST_API_KEY }}" \
                adminApiKey="${{ secrets.ADMIN_API_KEY }}" \
                azureClientId="${{ secrets.AZURE_CLIENT_ID }}" \
                azureTenantId="${{ secrets.AZURE_TENANT_ID }}" \
                azureSubscriptionId="${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
              --verbose \
              --debug
          fi
          
          echo "📤 Extracting deployment outputs..."
          DEPLOYMENT_OUTPUTS=$(az deployment group show \
            --resource-group "$RG_NAME" \
            --name "$DEPLOYMENT_NAME" \
            --query "properties.outputs" \
            --output json)
          
          # Extract infrastructure outputs
          KEY_VAULT_NAME=$(echo "$DEPLOYMENT_OUTPUTS" | jq -r '.infrastructure.value.keyVaultName // empty')
          
          # Extract Function App outputs if deployed
          if [ "${{ needs.analyze-changes.outputs.deploy-function-app }}" == "true" ]; then
            FUNCTION_APP_NAME=$(echo "$DEPLOYMENT_OUTPUTS" | jq -r '.functionAppDeployment.value.appServiceName // empty')
            FUNCTION_APP_URL=$(echo "$DEPLOYMENT_OUTPUTS" | jq -r '.functionAppDeployment.value.appServiceUrl // empty')
            
            if [ -n "$FUNCTION_APP_NAME" ] && [ "$FUNCTION_APP_NAME" != "null" ]; then
              echo "function-app-name=$FUNCTION_APP_NAME" >> $GITHUB_OUTPUT
              echo "function-app-url=$FUNCTION_APP_URL" >> $GITHUB_OUTPUT
              echo "✅ Function App: $FUNCTION_APP_NAME"
            fi
          fi
          
          # Extract Web App outputs if deployed
          if [ "${{ needs.analyze-changes.outputs.deploy-web-app }}" == "true" ]; then
            WEB_APP_NAME=$(echo "$DEPLOYMENT_OUTPUTS" | jq -r '.webAppDeployment.value.appServiceName // empty')
            WEB_APP_URL=$(echo "$DEPLOYMENT_OUTPUTS" | jq -r '.webAppDeployment.value.appServiceUrl // empty')
            
            if [ -n "$WEB_APP_NAME" ] && [ "$WEB_APP_NAME" != "null" ]; then
              echo "web-app-name=$WEB_APP_NAME" >> $GITHUB_OUTPUT
              echo "web-app-url=$WEB_APP_URL" >> $GITHUB_OUTPUT
              echo "✅ Web App: $WEB_APP_NAME"
            fi
          fi
          
          # Set Key Vault name
          if [ -n "$KEY_VAULT_NAME" ] && [ "$KEY_VAULT_NAME" != "null" ]; then
            echo "key-vault-name=$KEY_VAULT_NAME" >> $GITHUB_OUTPUT
            echo "✅ Key Vault: $KEY_VAULT_NAME"
          fi
          
          echo "🎉 Infrastructure deployment completed successfully"

  deploy-function-app:
    runs-on: ubuntu-latest
    needs: [analyze-changes, build-and-test, deploy-infrastructure]
    if: needs.build-and-test.result == 'success' && needs.analyze-changes.outputs.functions-changed == 'true' && needs.analyze-changes.outputs.deploy-function-app == 'true'
    steps:
      - name: Initialize Function App deployment
        run: |
          echo "🔧 Function App Deployment"
          echo "📅 Start: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
      
      - name: Download Function App artifact
        uses: actions/download-artifact@v4
        with:
          name: functions-app
          path: ./publish
      
      - name: Deploy Function App
        run: |
          # Determine app service name
          if [ -n "${{ needs.deploy-infrastructure.outputs.function-app-name }}" ]; then
            APP_SERVICE_NAME="${{ needs.deploy-infrastructure.outputs.function-app-name }}"
          else
            ENV="${{ needs.analyze-changes.outputs.deploy-environment }}"
            APP_SERVICE_NAME="func-mpa-${ENV}-eus2-$(echo '${{ needs.analyze-changes.outputs.resource-group-name }}' | cut -d'-' -f6)"
          fi
          
          RG_NAME="${{ needs.analyze-changes.outputs.resource-group-name }}"
          
          echo "📦 Deploying Function App to: $APP_SERVICE_NAME"
          
          # Verify Function App exists
          if ! az functionapp show --name "$APP_SERVICE_NAME" --resource-group "$RG_NAME" --output none 2>/dev/null; then
            echo "❌ Function App '$APP_SERVICE_NAME' not found"
            exit 1
          fi
          
          # Create deployment package
          cd ./publish
          zip -r ../function-app.zip . > /dev/null 2>&1
          cd ..
          
          # Deploy
          echo "🚀 Deploying Function App..."
          az functionapp deploy \
            --resource-group "$RG_NAME" \
            --name "$APP_SERVICE_NAME" \
            --src-path "./function-app.zip" \
            --type zip \
            --async true
          
          # Clean up
          rm -f "./function-app.zip"
          
          echo "✅ Function App deployment completed"

  deploy-web-app:
    runs-on: ubuntu-latest
    needs: [analyze-changes, build-and-test, deploy-infrastructure]
    if: always() && needs.build-and-test.result == 'success' && needs.analyze-changes.outputs.ui-changed == 'true' && needs.analyze-changes.outputs.deploy-web-app == 'true' && (needs.deploy-infrastructure.result == 'success' || needs.deploy-infrastructure.result == 'skipped')
    steps:
      - name: Initialize Web App deployment
        run: |
          echo "🌐 Web App Deployment"
          echo "📅 Start: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
      
      - name: Download UI artifact
        uses: actions/download-artifact@v4
        with:
          name: ui-app
          path: ./publish
      
      - name: Deploy Web App
        run: |
          # Determine app service name
          if [ -n "${{ needs.deploy-infrastructure.outputs.web-app-name }}" ]; then
            APP_SERVICE_NAME="${{ needs.deploy-infrastructure.outputs.web-app-name }}"
            echo "✅ Using web app name from infrastructure output: $APP_SERVICE_NAME"
          else
            ENV="${{ needs.analyze-changes.outputs.deploy-environment }}"
            RG_NAME="${{ needs.analyze-changes.outputs.resource-group-name }}"
            
            echo "🔍 Infrastructure output not available, discovering existing web app..."
            echo "  Environment: $ENV"
            echo "  Resource Group: $RG_NAME"
            
            # Try to find existing web app in the resource group
            EXISTING_WEB_APPS=$(az webapp list --resource-group "$RG_NAME" --query "[?contains(name, 'web-mpa-${ENV}')].name" -o tsv 2>/dev/null || echo "")
            
            if [ -n "$EXISTING_WEB_APPS" ]; then
              APP_SERVICE_NAME=$(echo "$EXISTING_WEB_APPS" | head -n1)
              echo "✅ Found existing web app: $APP_SERVICE_NAME"
            else
              # Fallback to expected naming convention
              SUFFIX=$(echo "$RG_NAME" | grep -o '[^-]*$' | head -c 8)
              APP_SERVICE_NAME="web-mpa-${ENV}-eus2-${SUFFIX}"
              echo "🎯 Using expected naming convention: $APP_SERVICE_NAME"
            fi
          fi
          
          RG_NAME="${{ needs.analyze-changes.outputs.resource-group-name }}"
          
          echo "📦 Deploying Web App to: $APP_SERVICE_NAME"
          
          # Verify Web App exists
          if ! az webapp show --name "$APP_SERVICE_NAME" --resource-group "$RG_NAME" --output none 2>/dev/null; then
            echo "❌ Web App '$APP_SERVICE_NAME' not found"
            exit 1
          fi
          
          # Configure Web App for Node.js startup
          echo "⚙️ Configuring Web App settings for Node.js..."
          
          # Set startup command for Node.js
          az webapp config set \
            --resource-group "$RG_NAME" \
            --name "$APP_SERVICE_NAME" \
            --startup-file "node server.js" \
            --output none
          
          # Set Node.js version and other app settings
          az webapp config appsettings set \
            --resource-group "$RG_NAME" \
            --name "$APP_SERVICE_NAME" \
            --settings \
              WEBSITE_NODE_DEFAULT_VERSION="18" \
              NODE_ENV="production" \
              PORT="8080" \
              WEBSITE_RUN_FROM_PACKAGE="1" \
            --output none
          
          echo "✅ Web App configuration updated"
          
          # Create deployment package
          cd ./publish
          zip -r ../web-app.zip . > /dev/null 2>&1
          cd ..
          
          # Deploy with timeout and better error handling
          echo "🚀 Deploying Web App..."
          
          # Deploy without async to wait for completion and get better error reporting
          az webapp deploy \
            --resource-group "$RG_NAME" \
            --name "$APP_SERVICE_NAME" \
            --src-path "./web-app.zip" \
            --type zip \
            --timeout 600
          
          # Check deployment status
          echo "🔍 Checking deployment status..."
          sleep 30  # Give it time to start
          
          # Get app service URL for health check
          APP_URL=$(az webapp show --resource-group "$RG_NAME" --name "$APP_SERVICE_NAME" --query "defaultHostName" --output tsv)
          
          if [ -n "$APP_URL" ]; then
            echo "🌐 App URL: https://$APP_URL"
            echo "🏥 Health check URL: https://$APP_URL/health"
            
            # Try to hit the health endpoint
            echo "🔍 Testing health endpoint..."
            for i in {1..5}; do
              echo "  Attempt $i/5..."
              if curl -f -s --max-time 30 "https://$APP_URL/health" > /dev/null; then
                echo "✅ Health check passed!"
                break
              else
                echo "⏳ Health check failed, waiting 30s..."
                sleep 30
              fi
            done
          fi
          
          # Clean up
          rm -f "./web-app.zip"
          
          echo "✅ Web App deployment completed"

  test-deployments:
    runs-on: ubuntu-latest
    needs: [analyze-changes, deploy-function-app, deploy-web-app, deploy-infrastructure]
    if: always() && (needs.deploy-function-app.result == 'success' || needs.deploy-web-app.result == 'success')
    steps:
      - name: Test Function App
        if: needs.analyze-changes.outputs.functions-changed == 'true' && needs.deploy-function-app.result == 'success'
        run: |
          APP_URL="${{ needs.deploy-infrastructure.outputs.function-app-url }}"
          echo "🔧 Testing Function App at: $APP_URL"
          
          for i in {1..5}; do
            echo "🔍 Health check attempt $i/5..."
            
            HEALTH_STATUS=$(curl -s -L -o /dev/null -w '%{http_code}' "$APP_URL/api/health" --max-time 15 || echo "000")
            
            if [[ "$HEALTH_STATUS" == "200" ]]; then
              echo "✅ Function App health check passed"
              break
            elif [[ "$HEALTH_STATUS" == "000" ]]; then
              echo "⚠️ Connection failed - Function App may still be starting"
            else
              echo "⚠️ Health check returned HTTP $HEALTH_STATUS"
            fi
            
            if [ $i -lt 5 ]; then
              sleep 30
            fi
          done
      
      - name: Test Web App
        if: needs.analyze-changes.outputs.ui-changed == 'true' && needs.deploy-web-app.result == 'success'
        run: |
          APP_URL="${{ needs.deploy-infrastructure.outputs.web-app-url }}"
          echo "🌐 Testing Web App at: $APP_URL"
          
          for i in {1..5}; do
            echo "🔍 Health check attempt $i/5..."
            
            HEALTH_STATUS=$(curl -s -L -o /dev/null -w '%{http_code}' "$APP_URL" --max-time 15 || echo "000")
            
            if [[ "$HEALTH_STATUS" == "200" ]]; then
              echo "✅ Web App health check passed"
              break
            elif [[ "$HEALTH_STATUS" == "000" ]]; then
              echo "⚠️ Connection failed - Web App may still be starting"
            else
              echo "⚠️ Health check returned HTTP $HEALTH_STATUS"
            fi
            
            if [ $i -lt 5 ]; then
              sleep 30
            fi
          done

  deployment-summary:
    runs-on: ubuntu-latest
    needs: [analyze-changes, build-and-test, deploy-infrastructure, deploy-function-app, deploy-web-app, test-deployments]
    if: always()
    steps:
      - name: Generate deployment summary
        run: |
          echo "📋 Member Property Alert Deployment Summary"
          echo "=========================================="
          echo "📅 Completed: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "🎯 Environment: ${{ needs.analyze-changes.outputs.deploy-environment }}"
          echo "📂 Resource Group: ${{ needs.analyze-changes.outputs.resource-group-name }}"
          echo ""
          echo "🔍 Changes Analyzed:"
          echo "  Infrastructure: ${{ needs.analyze-changes.outputs.infra-changed }}"
          echo "  Functions: ${{ needs.analyze-changes.outputs.functions-changed }}"
          echo "  UI: ${{ needs.analyze-changes.outputs.ui-changed }}"
          echo ""
          echo "🏗️ Job Results:"
          echo "  Build and Test: ${{ needs.build-and-test.result }}"
          echo "  Deploy Infrastructure: ${{ needs.deploy-infrastructure.result }}"
          echo "  Deploy Function App: ${{ needs.deploy-function-app.result }}"
          echo "  Deploy Web App: ${{ needs.deploy-web-app.result }}"
          echo "  Test Deployments: ${{ needs.test-deployments.result }}"
          echo ""
          echo "🎯 Deployed Services:"
          if [ "${{ needs.deploy-infrastructure.outputs.function-app-name }}" != "" ]; then
            echo "  ✅ Function App: ${{ needs.deploy-infrastructure.outputs.function-app-name }}"
            echo "     URL: ${{ needs.deploy-infrastructure.outputs.function-app-url }}"
          fi
          if [ "${{ needs.deploy-infrastructure.outputs.web-app-name }}" != "" ]; then
            echo "  ✅ Web App: ${{ needs.deploy-infrastructure.outputs.web-app-name }}"
            echo "     URL: ${{ needs.deploy-infrastructure.outputs.web-app-url }}"
          fi
          if [ "${{ needs.deploy-infrastructure.outputs.key-vault-name }}" != "" ]; then
            echo "  🔐 Key Vault: ${{ needs.deploy-infrastructure.outputs.key-vault-name }}"
          fi
          echo ""
          echo "🔐 Security Features:"
          echo "  ✅ Key Vault integration for secrets"
          echo "  ✅ Managed Identity authentication"
          echo "  ✅ RBAC-based access control"
          echo "  ✅ HTTPS-only communication"
          echo ""
          echo "🎉 Deployment completed successfully!"
